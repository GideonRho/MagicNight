@page "/AdminProfiles"
@attribute [Authorize(Roles = "admin")]
@inherits OwningComponentBase
@inject NavigationManager NavigationManager
@inject ProfileService ProfileService
@inject ISnackbar SnackBar
@inject IDialogService DialogService
@using MagicNight.Services
@using MagicNight.Models.Database.Profiles
@using Microsoft.EntityFrameworkCore

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
    <MudText Typo="Typo.h3" GutterBottom="true">Profiles</MudText>
    
    <MudTable Items="Profiles">
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Filled" Color="@ProfileColor(context)" OnClick="() => ToggleEnabled(context)">@ProfileState(context)</MudButton>
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteDialog(context)"></MudIconButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudDivider DividerType="DividerType.Middle" Class="my-6"/>
    <MudTextField @bind-Value="NewProfile.Name" Label="Name" Variant="Variant.Outlined" />
    <br/>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@AddProfile">Add</MudButton>
</MudContainer>

@code {

    private Profile NewProfile { get; set; } = new();
    private List<Profile> Profiles { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        Profiles = await ProfileService.All().ToListAsync();
        StateHasChanged();
    }
    
    private async Task AddProfile()
    {
        if (string.IsNullOrEmpty(NewProfile.Name)) return;
        await ProfileService.Add(NewProfile);
        NewProfile = new Profile();
        await Refresh();
    }

    private async void DeleteDialog(Profile profile)
    {
        bool? result = await DialogService.ShowMessageBox(
            $"Delete {profile.Name}", 
            "Deleting can not be undone!", 
            yesText:"Delete!", cancelText:"Cancel");
        if (result is true)
            await DeleteProfile(profile);
        await Refresh();
    }
    
    private async Task DeleteProfile(Profile profile)
    {
        await ProfileService.Delete(profile);
    }

    private async Task ToggleEnabled(Profile profile)
    {
        if (profile.IsDisabled) await ProfileService.Enable(profile);
        else await ProfileService.Disable(profile);
        await Refresh();
    }
    
    private static Color ProfileColor(Profile profile) => profile.IsDisabled ? Color.Error : Color.Success;
    private static string ProfileState(Profile profile) => profile.IsDisabled ? "Disabled" : "Enabled";

}